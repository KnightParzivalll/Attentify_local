services:
  db:
    image: postgres:17.4-alpine3.21
    container_name: db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    networks:
      - traefik-net
    volumes:
      - pgdata:/var/lib/postgresql/data:rw
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      start_period: 3s
      interval: 5s
      timeout: 5s
      retries: 5


  backend:
    build: ./backend
    container_name: backend
    restart: unless-stopped
    networks:
      - traefik-net
    environment:
      DATABASE_URL: "postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}"
      SECRET_KEY: ${SECRET_KEY}
      UVICORN_WORKERS: "4"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health || exit 1"]
      start_period: 5s 
      interval: 10s
      timeout: 5s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.middlewares=strip-api@docker"
      - "traefik.http.middlewares.strip-api.stripprefix.prefixes=/api"
      - "traefik.http.services.backend.loadbalancer.server.port=8080"
      - "traefik.http.routers.backend.service=backend"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.routers.backend.rule=PathPrefix(`/api/`)"

  reverse-proxy:
    image: traefik:3.3.4
    container_name: reverse-proxy
    restart: unless-stopped
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
    ports:
      - "80:80" 
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
    labels:
       - "traefik.enable=true"
       - "traefik.http.routers.traefik.rule=PathPrefix(`/dashboard/`)"
       - "traefik.http.routers.traefik.entrypoints=web"
       - "traefik.http.routers.traefik.service=api@internal"
    networks:
      - public
      - traefik-net
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy

  

  frontend:
    build: ./frontend
    container_name: frontend
    restart: unless-stopped
    tmpfs:
      - /tmp 
      - /var/cache/nginx
      - /var/run
    networks:
      - traefik-net
    volumes:
      - ./docker/frontend/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/frontend/nginx.conf:/etc/nginx/nginx.conf:ro
    environment:
      VITE_API_URL: /api
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/ || exit 1"]
      start_period: 5s   # Allow Nginx to start
      interval: 10s
      timeout: 5s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.frontend.loadbalancer.server.port=8080"
      - "traefik.http.routers.frontend.service=frontend"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.routers.frontend.entrypoints=web"

  redis-backend:
    image: redis:7.4.2-alpine
    container_name: redis-backend
    restart: unless-stopped
    volumes:
      - data:/data:rw
    networks:
      - traefik-net
    command: --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s

volumes:
  pgdata:
  data:

networks:
  public:
    name: public
    driver: bridge

  traefik-net:
    name: traefik-net
    driver: bridge
    internal: true